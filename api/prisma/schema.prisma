generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model People {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  url         String     @unique
  name        String
  height      String?
  mass        String?
  hair_color  String?
  skin_color  String?
  eye_color   String?
  birth_year  String?
  gender      String?
  homeworld   Planet?    @relation("PlanetResidents", fields: [homeworldId], references: [id])
  homeworldId String?     @db.ObjectId
  starships   StarshipOnPilot[]
  films       FilmOnCharacter[]
  created     DateTime   @default(now())
  edited      DateTime   @updatedAt
}

model Planet {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  url              String      @unique
  name             String
  rotation_period  String?
  orbital_period   String?
  diameter         String?
  climate          String?
  gravity          String?
  terrain          String?
  surface_water    String?
  population       String?
  residents        People[]    @relation("PlanetResidents")
  films            FilmOnPlanet[]
  created          DateTime    @default(now())
  edited           DateTime    @updatedAt
}

model Film {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  url           String      @unique
  title         String
  episode_id    Int
  opening_crawl String
  director      String
  producer      String
  release_date  String
  characters    FilmOnCharacter[]
  planets       FilmOnPlanet[]
  starships     FilmOnStarship[]
  created       DateTime    @default(now())
  edited        DateTime    @updatedAt
}

model Starship {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  url                   String      @unique
  name                  String
  model                 String
  manufacturer          String
  cost_in_credits       String?
  length                String?
  max_atmosphering_speed String?
  crew                  String?
  passengers            String?
  cargo_capacity        String?
  consumables           String?
  hyperdrive_rating     String?
  MGLT                  String?
  starship_class        String
  pilots                StarshipOnPilot[]
  films                 FilmOnStarship[]
  created               DateTime    @default(now())
  edited                DateTime    @updatedAt
}

model FilmOnCharacter {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  person  People   @relation(fields: [personId], references: [id])
  personId String  @db.ObjectId
  film    Film     @relation(fields: [filmId], references: [id])
  filmId  String   @db.ObjectId
}

model FilmOnPlanet {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  film    Film     @relation(fields: [filmId], references: [id])
  filmId  String   @db.ObjectId
  planet  Planet   @relation(fields: [planetId], references: [id])
  planetId String  @db.ObjectId
}

model FilmOnStarship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  film      Film     @relation(fields: [filmId], references: [id])
  filmId    String   @db.ObjectId
  starship  Starship @relation(fields: [starshipId], references: [id])
  starshipId String   @db.ObjectId
}

model StarshipOnPilot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  starship  Starship @relation(fields: [starshipId], references: [id])
  starshipId String   @db.ObjectId
  pilot     People   @relation(fields: [pilotId], references: [id])
  pilotId   String   @db.ObjectId
}
